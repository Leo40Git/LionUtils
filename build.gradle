plugins {
    id 'fabric-loom' version '0.4-SNAPSHOT'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.8.5'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"


    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.
}

if (Boolean.valueOf(project.use_runtime_deps)) {
    repositories {
        maven { url "https://jitpack.io" }
        if (!Boolean.valueOf(project.lithium_disable) && Boolean.valueOf(project.lithium_use_local)) {
            flatDir {
                dirs 'mods'
            }
        }
    }

    dependencies {
        modRuntime "io.github.prospector:modmenu:${project.modmenu_version}"
        // DataBreaker applies a number of patches to eliminate the loading of data fixers
        // This greatly reduces the amount of time needed to start the game, but is generally unsafe in production
        modRuntime "com.github.SuperCoder7979:databreaker:${project.databreaker_version}"
        // JellySquid's elemental optimizations
        if (!Boolean.valueOf(project.lithium_disable)) {
            if (Boolean.valueOf(project.lithium_use_local)) {
                modRuntime name: 'lithium'
            } else {
                modRuntime "com.github.jellysquid3:lithium-fabric:${project.lithium_version}"
            }
        }
        modRuntime "com.github.jellysquid3:phosphor-fabric:${project.phosphor_version}"
        modRuntime "com.github.jellysquid3:sodium-fabric:${project.sodium_version}"
    }
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

task lionutilsJavadoc(type: Javadoc) {
    tasks.javadoc.dependsOn it

    source = sourceSets.main.allJava
    classpath = sourceSets.main.runtimeClasspath
    exclude 'adudecalledleo/lionutils/internal/**'
    destinationDir file('docs')
    title "LionUtils ${version.toString().split("\\+")[0]} API"

    options.memberLevel = JavadocMemberLevel.PROTECTED
    options.splitIndex = true
    options.noDeprecated = false
    options.noDeprecatedList = false
    options.noIndex = false
    options.noNavBar = false
    options.noTree = false
    options.links 'http://docs.oracle.com/javase/8/docs/api/'

    options.addBooleanOption 'notimestamp', true
    options.addStringOption 'Xdoclint:none', '-quiet'
    options.addStringOption 'encoding', 'UTF-8'
    options.addStringOption 'charSet', 'UTF-8'

    doLast {
        copy {
            from 'docs_src'
            into 'docs'
        }
    }
}

task javadocJar(type: Jar, dependsOn: lionutilsJavadoc) {
    classifier = "javadoc"
    from lionutilsJavadoc
}

jar {
    from "LICENSE"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
            artifact(javadocJar) {
                builtBy javadocJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}

bintray {
    user = project.property('bintray.user')
    key = project.property('bintray.key')
    configurations = [ 'mavenJava' ]
    pkg {
        repo = 'mcmods.fabric'
        name = 'lionutils'
        version {
            name = "${project.mod_version}"
            vcsTag = "v${project.mod_version}"
            released = new Date()
        }
    }
}
